# Overview:
# This pyproject.toml file manages the build, packaging, and distribution of the DAM4SAM library.

# 1. Build System Configuration
# Tells pip which tool to use to build your package.
[build-system]
requires = ["setuptools>=70.0.0", "wheel"]
build-backend = "setuptools.build_meta"

# # 2. Project Metadata (PEP 621)
# This is the core information about your library. settings 
[project]
name = "dam4sam"
version = "0.0.1"
description = "This library is the adaptation of DAM4SAM, which allows multi-object tracking and uses bounding boxes from different frames to initialize objects."
readme = "README.md"
requires-python = ">=3.8"
license = { "text" = "APACHE-2.0" }
keywords = ["deep-learning", "computer-vision", "sam2"]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License", # Or MIT, etc.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Operating System :: POSIX :: Linux",
]

# 3. Project Dependencies
# These are the packages your library needs to run.
dependencies = [
    "setuptools>=61.0",  
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "hydra-core>=1.3.2",
    "iopath>=0.1.10",
    "pillow>=9.4.0",
    "opencv-python",
    "matplotlib",
    "tqdm",
    "vot-toolkit",
    "vot-trax",
    "PyYAML"
]

# 4. Optional Dependencies (for development, testing, etc.)
# Installed with: pip install .[dev]
[project.optional-dependencies]
dev =  []
loggers = []
export = []

# 5. Project URLs
# Links that will appear on the PyPI project page.
[project.urls]
#"Homepage" = ""
#"Documentation" = ""
#"Bug Tracker" = ""


# --- Tool Configurations ---

[tool.setuptools]
# Tells setuptools where to find your actual code.
# Assumes your code is in a `<root>/dam4sam` directory.
packages = { find = { where = ["."], include = ["dam4sam", "dam4sam.*"]} }

[tool.setuptools.package-data]
"dam4sam.sam2" = ["*.yaml"] 



[tool.ruff]
# Configuration for the Ruff linter/formatter.
line-length = 88
# Select rules: F (Pyflakes), E/W (pycodestyle), I (isort), TID (flake8-tidy-imports)
select = ["E", "W", "F", "I", "TID"]

[tool.black]
# Configuration for the Black code formatter.
line-length = 88

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]

[tool.mypy]
# Configuration for the MyPy type checker.
python_version = "3.8"
warn_return_any = true
ignore_missing_imports = true

